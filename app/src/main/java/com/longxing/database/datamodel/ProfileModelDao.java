package com.longxing.database.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFILE_MODEL".
*/
public class ProfileModelDao extends AbstractDao<ProfileModel, Long> {

    public static final String TABLENAME = "PROFILE_MODEL";

    /**
     * Properties of entity ProfileModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "Id");
        public final static Property UpdateTime = new Property(1, String.class, "updateTime", false, "UpdateTime");
        public final static Property ProfileName = new Property(2, String.class, "profileName", false, "ProfileName");
        public final static Property ProfileValue = new Property(3, String.class, "profileValue", false, "ProfileValue");
        public final static Property ProfileRemark = new Property(4, String.class, "profileRemark", false, "ProfileRemark");
        public final static Property ProfileTag = new Property(5, String.class, "profileTag", false, "ProfileTag");
    }


    public ProfileModelDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE_MODEL\" (" + //
                "\"Id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"UpdateTime\" TEXT," + // 1: updateTime
                "\"ProfileName\" TEXT," + // 2: profileName
                "\"ProfileValue\" TEXT," + // 3: profileValue
                "\"ProfileRemark\" TEXT," + // 4: profileRemark
                "\"ProfileTag\" TEXT);"); // 5: profileTag
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_PROFILE_MODEL_ProfileName ON PROFILE_MODEL" +
                " (\"ProfileName\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProfileModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String profileName = entity.getProfileName();
        if (profileName != null) {
            stmt.bindString(3, profileName);
        }
 
        String profileValue = entity.getProfileValue();
        if (profileValue != null) {
            stmt.bindString(4, profileValue);
        }
 
        String profileRemark = entity.getProfileRemark();
        if (profileRemark != null) {
            stmt.bindString(5, profileRemark);
        }
 
        String profileTag = entity.getProfileTag();
        if (profileTag != null) {
            stmt.bindString(6, profileTag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProfileModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String profileName = entity.getProfileName();
        if (profileName != null) {
            stmt.bindString(3, profileName);
        }
 
        String profileValue = entity.getProfileValue();
        if (profileValue != null) {
            stmt.bindString(4, profileValue);
        }
 
        String profileRemark = entity.getProfileRemark();
        if (profileRemark != null) {
            stmt.bindString(5, profileRemark);
        }
 
        String profileTag = entity.getProfileTag();
        if (profileTag != null) {
            stmt.bindString(6, profileTag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ProfileModel readEntity(Cursor cursor, int offset) {
        ProfileModel entity = new ProfileModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // profileName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // profileValue
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // profileRemark
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // profileTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProfileModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProfileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProfileValue(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProfileRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProfileTag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProfileModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProfileModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProfileModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

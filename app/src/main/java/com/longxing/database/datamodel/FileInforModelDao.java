package com.longxing.database.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FILE_INFOR_MODEL".
*/
public class FileInforModelDao extends AbstractDao<FileInforModel, Long> {

    public static final String TABLENAME = "FILE_INFOR_MODEL";

    /**
     * Properties of entity FileInforModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Id");
        public final static Property Updatetime = new Property(1, String.class, "updatetime", false, "UpdateTime");
        public final static Property FileTag = new Property(2, String.class, "fileTag", false, "FileTag");
        public final static Property Code = new Property(3, String.class, "code", false, "Code");
        public final static Property FileName = new Property(4, String.class, "fileName", false, "FileName");
        public final static Property FilePath = new Property(5, String.class, "filePath", false, "FilePath");
        public final static Property FileSize = new Property(6, String.class, "fileSize", false, "FileSize");
        public final static Property FileDir = new Property(7, String.class, "fileDir", false, "FileDir");
        public final static Property FileCreatetime = new Property(8, String.class, "fileCreatetime", false, "FileCreatetime");
        public final static Property IsHide = new Property(9, String.class, "isHide", false, "IsHide");
        public final static Property IsFileOrFalseDir = new Property(10, String.class, "isFileOrFalseDir", false, "IsFileOrFalseDir");
    }


    public FileInforModelDao(DaoConfig config) {
        super(config);
    }
    
    public FileInforModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FILE_INFOR_MODEL\" (" + //
                "\"Id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UpdateTime\" TEXT," + // 1: updatetime
                "\"FileTag\" TEXT," + // 2: fileTag
                "\"Code\" TEXT," + // 3: code
                "\"FileName\" TEXT," + // 4: fileName
                "\"FilePath\" TEXT," + // 5: filePath
                "\"FileSize\" TEXT," + // 6: fileSize
                "\"FileDir\" TEXT," + // 7: fileDir
                "\"FileCreatetime\" TEXT," + // 8: fileCreatetime
                "\"IsHide\" TEXT," + // 9: isHide
                "\"IsFileOrFalseDir\" TEXT);"); // 10: isFileOrFalseDir
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FILE_INFOR_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FileInforModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(2, updatetime);
        }
 
        String fileTag = entity.getFileTag();
        if (fileTag != null) {
            stmt.bindString(3, fileTag);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
 
        String fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindString(7, fileSize);
        }
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(8, fileDir);
        }
 
        String fileCreatetime = entity.getFileCreatetime();
        if (fileCreatetime != null) {
            stmt.bindString(9, fileCreatetime);
        }
 
        String isHide = entity.getIsHide();
        if (isHide != null) {
            stmt.bindString(10, isHide);
        }
 
        String isFileOrFalseDir = entity.getIsFileOrFalseDir();
        if (isFileOrFalseDir != null) {
            stmt.bindString(11, isFileOrFalseDir);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FileInforModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String updatetime = entity.getUpdatetime();
        if (updatetime != null) {
            stmt.bindString(2, updatetime);
        }
 
        String fileTag = entity.getFileTag();
        if (fileTag != null) {
            stmt.bindString(3, fileTag);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(4, code);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(5, fileName);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
 
        String fileSize = entity.getFileSize();
        if (fileSize != null) {
            stmt.bindString(7, fileSize);
        }
 
        String fileDir = entity.getFileDir();
        if (fileDir != null) {
            stmt.bindString(8, fileDir);
        }
 
        String fileCreatetime = entity.getFileCreatetime();
        if (fileCreatetime != null) {
            stmt.bindString(9, fileCreatetime);
        }
 
        String isHide = entity.getIsHide();
        if (isHide != null) {
            stmt.bindString(10, isHide);
        }
 
        String isFileOrFalseDir = entity.getIsFileOrFalseDir();
        if (isFileOrFalseDir != null) {
            stmt.bindString(11, isFileOrFalseDir);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FileInforModel readEntity(Cursor cursor, int offset) {
        FileInforModel entity = new FileInforModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updatetime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // fileTag
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // filePath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // fileSize
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fileDir
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fileCreatetime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // isHide
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // isFileOrFalseDir
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FileInforModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUpdatetime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFileTag(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFilePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFileSize(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFileDir(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFileCreatetime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsHide(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsFileOrFalseDir(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FileInforModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FileInforModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FileInforModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

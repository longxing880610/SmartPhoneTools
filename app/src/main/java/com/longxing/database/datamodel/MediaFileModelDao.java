package com.longxing.database.datamodel;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDIA_FILE_MODEL".
*/
public class MediaFileModelDao extends AbstractDao<MediaFileModel, Long> {

    public static final String TABLENAME = "MEDIA_FILE_MODEL";

    /**
     * Properties of entity MediaFileModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "Id");
        public final static Property UpdateTime = new Property(1, String.class, "updateTime", false, "UpdateTime");
        public final static Property MediaPath = new Property(2, String.class, "mediaPath", false, "MediaPath");
        public final static Property MediaDuration = new Property(3, String.class, "mediaDuration", false, "MediaDuration");
        public final static Property MediaName = new Property(4, String.class, "mediaName", false, "MediaName");
        public final static Property MediaTag = new Property(5, String.class, "mediaTag", false, "MediaTag");
    }


    public MediaFileModelDao(DaoConfig config) {
        super(config);
    }
    
    public MediaFileModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDIA_FILE_MODEL\" (" + //
                "\"Id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"UpdateTime\" TEXT," + // 1: updateTime
                "\"MediaPath\" TEXT," + // 2: mediaPath
                "\"MediaDuration\" TEXT," + // 3: mediaDuration
                "\"MediaName\" TEXT," + // 4: mediaName
                "\"MediaTag\" TEXT);"); // 5: mediaTag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDIA_FILE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MediaFileModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String mediaPath = entity.getMediaPath();
        if (mediaPath != null) {
            stmt.bindString(3, mediaPath);
        }
 
        String mediaDuration = entity.getMediaDuration();
        if (mediaDuration != null) {
            stmt.bindString(4, mediaDuration);
        }
 
        String mediaName = entity.getMediaName();
        if (mediaName != null) {
            stmt.bindString(5, mediaName);
        }
 
        String mediaTag = entity.getMediaTag();
        if (mediaTag != null) {
            stmt.bindString(6, mediaTag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MediaFileModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(2, updateTime);
        }
 
        String mediaPath = entity.getMediaPath();
        if (mediaPath != null) {
            stmt.bindString(3, mediaPath);
        }
 
        String mediaDuration = entity.getMediaDuration();
        if (mediaDuration != null) {
            stmt.bindString(4, mediaDuration);
        }
 
        String mediaName = entity.getMediaName();
        if (mediaName != null) {
            stmt.bindString(5, mediaName);
        }
 
        String mediaTag = entity.getMediaTag();
        if (mediaTag != null) {
            stmt.bindString(6, mediaTag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MediaFileModel readEntity(Cursor cursor, int offset) {
        MediaFileModel entity = new MediaFileModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // updateTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mediaPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mediaDuration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mediaName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // mediaTag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MediaFileModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setUpdateTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMediaPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMediaDuration(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMediaName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMediaTag(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MediaFileModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MediaFileModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MediaFileModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
